Today i have done a project regarding the inventory using concepts like objects class,interface,inheritance.
This project contains a objects like vehicle or books so that that can be purchased or rental based.
I have gone through the module video and done a sample project using abstract class .
Bank Poject:
 1.we have created the data fields that are given and created a new class according to the flow chart and created the constructors and set the properties
 2.In the constructors we have override the constrcutors for abstract constructor and done a chaining constructors 
 3.We have created the methods according the flow chart.

SQL:
DBMS-Data base Management System
  it is a software used to manage the database.
  it basically serves as an interface between the database and its end users.used to retrieve,update and manage the data.

there are 4 types of dbms
 1.Hierarchial
 2.Network
 3.Relational
 4.Object oriented

1.Heirarchial-it showcase the predices and successor type of relationship
its like a tree in which nodes represents records and branches represents field

2.Relational-data is stored in the form of tables

3.object oriented-i this everything is represent in a object it contains data and instructions to be done with the data
4.Network-multiple users data can be link
Queries:
Create database Employee;
use Employee;
create table EmployeeInfo
(
employeeId int,
employeeName varchar(50),
employeeAddress varchar(50),
PhoneNumber bigint,
City varchar(50),
Country varchar(50)
);
  -alter table employeeinfo add BloodGroup varchar(50)
  -alter table employeeinfo add DOB date;
  -alter table employeeinfo alter column DOB datetime;
  -constraint UC_employeeinfo unique(employeeId,PhoneNumber);
create table EmployeeInfo1
(
employeeId int,
employeeName varchar(50),
employeeAddress varchar(50),
PhoneNumber bigint,
City varchar(50),
Country varchar(50)
constraint UC_employeeinfo unique(employeeId,PhoneNumber)   //using unique constrint for two data fields.
);
Drop table employeeinfo1;  //drop the table
create table Employeeinfo2
(
employeeId int,
employeeName varchar(50),
employeeAddress varchar(50),
PhoneNumber bigint,
City varchar(50),
Country varchar(50)
);
-Insert into employeeinfo2 Values('12','john','niceroad','9380','Bangalore','india');
-Insert into employeeinfo2 Values('13','jala','mgroad','2387','Bagevadi','japan');
-Insert into employeeinfo2 Values('14','jala','hsr','1123','Belagum','jermany');
-select * from Employeeinfo2;
-update employeeinfo2 set employeeName='Pavan',City='Bhimavaram'
 where employeeId=12;
-delete from employeeinfo2 where employeeId='12';
Create table samplesource(employeeId int,employeeName varchar(50),employeeScore int)
Create table sampleTarget(employeeId int,employeeName varchar(50),employeeScore int)
insert into samplesource values('34','vihan','35');
insert into samplesource values('35','viru','60');
insert into samplesource values('36','vishu','70');
insert into sampleTarget values('34','vishal','40');
insert into sampleTarget values('35','vinny','60');
insert into sampleTarget values('36','vishu','70');
select * from samplesource ;
select * from sampleTarget;
select employeeId,employeeName from samplesource;
select top 2 * from sampleTarget;
select * from samplesource order by employeeScore desc
select COUNT(employeeId),employeeScore from samplesource group by employeeScore;
select employeeId,employeeName,count(employeeScore) from sampleTarget group by grouping sets((employeeId,employeeName,employeeScore),(employeeId),(employeeName),(employeeScore));
select employeeID,count(employeeScore) from samplesource group by cube(employeeId) order by(employeeId)
19-10-2022
->Constraints:- The rule given  for the column for validation
*)Unique :-It is used to avoid the duplicate values into the coloum
->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(25) NOT NULL,
    FirstName varchar(25),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);
*)Not null:-It is used to avoid null values
->ALTER TABLE Persons
ALTER COLUMN Age int NOT NULL;
*)check :-It is a extra validation with a condition
->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(20) NOT NULL,
    FirstName varchar(250),
    Age int,
    City varchar(10),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='')
);
if the condtion  is satisfied the value is accepted else  it will be rejected
*)Primary key:-It is a constraints  which is used to identyfy  a records uniquely from the table
->CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(20) NOT NULL,
    FirstName varchar(20),
    Age int
);
->forenkey:-
*) FOREIGN KEY is a field in one table that refers to the PRIMARY KEY in another table.
->The table with the foreign key is called the child table and the table with the primary key is called the referenced or parent table.
20-10-2022
select*from DimEmployee
select*from DimProduct
 
 select DimEmployee.EmployeeKey,DimEmployee.EmployeeNationalIDAlternateKey,DimProduct.ProductKey,DimProduct.ProductAlternateKey
 from DimEmployee
 join DimProduct
 on DimEmployee.EmployeeKey=DimProduct.ProductKey;
 --create New Tables for joining --
 create database JoinsDatabase
 use JoinsDatabase
 --Table creations---
 create table Employee
 (
 Eid int primary key,
 Ename varchar(20) not null,
 Esal  money not null,
 Deptid int unique,
 Salid int unique
 )
 create table Department
 (
 Did int primary key,
 Dname varchar(20) not null, 
 )
 
 create table Salary
 (
 [Sid] int primary key,
 Sal money not null, 
 )
 select * from Employee
 select * from Department
 select * from Salary
 insert into employee values(101,'Pavan',15000,105,108)
 insert into employee values(102,'Ram',16000,103,103)
 insert into employee values(103,'Rajiv',14000,104,105)
 insert into employee values(104,'Tarun',17000,102,109)
 insert into employee values(105,'Ramu',13000,120,101)
  insert into Department values(102,'praveen')
  insert into Department values(101,'ramesh')
  insert into Department values(105,'manikanta')
  insert into Department values(108,'teja')
  insert into Salary values(102,'18000')
  insert into Salary values(105,'12000')
  insert into Salary values(103,'16000')
  insert into Salary values(110,'20000')
   
 select * from Employee
 select * from Department
 select * from Salary
 --Join 2 tables
 select Employee.Ename,Department.Dname
  from Employee
  join Department
  on Employee.Deptid=Department.Did  
  
  --left join 3 tables
  select Employee.Ename,Department.Dname,Salary.sal
  from Employee
   left join Department    
  on Employee.Deptid=Department.Did 
  left join Salary
  on Employee.Salid=Salary.[Sid]  
  where Salary.Sal>10000
  
  --right join 2 tables
  select Employee.Ename,Department.Dname
  from Employee
  right join Department
  on Employee.Deptid=Department.Did 
  
  --inner join 2 tables
  select Employee.Ename,Department.Dname
  from Employee
  inner join Department
  on Employee.Deptid=Department.Did  
  --full join 2 tables
  select Employee.Ename,Department.Dname
  from Employee
  full join Department
  on Employee.Deptid=Department.Did   
21-10-2022
Gone through basics of stored procedures.
Stored Procedure in SQL: Benefits And How to Create It
By Ravikiran A S
Last updated on Oct 21, 202261997
Everything That You Need to Know About Stored Procedure in SQL
Table of Contents
What are the Benefits of using a Stored Procedure in SQL?How to Create a Simple Stored Procedure in SQL?Why Do You Use SET NOCOUNT ON?How to Create a Stored Procedure with Parameters?How to Create a Stored Procedure in SQL with Default Parameters?View More
A stored procedure in SQL is a group of SQL statements that are stored together in a database. Based on the statements in the procedure and the parameters you pass, it can perform one or multiple DML operations on the database, and return value, if any. Thus, it allows you to pass the same statements multiple times, thereby, enabling reusability.
Data Analyst Master's Program
In Collaboration With IBMEXPLORE COURSEData Analyst Master's Program
What are the Benefits of using a Stored Procedure in SQL?
Stored procedures provide some crucial benefits, which are:
Reusable: As mentioned, multiple users and applications can easily use and reuse stored procedures by merely calling it.
Easy to modify: You can quickly change the statements in a stored procedure as and when you want to, with the help of the ALTER TABLE command.
Security: Stored procedures allow you to enhance the security of an application or a database by restricting the users from direct access to the table.
Low network traffic: The server only passes the procedure name instead of the whole query, reducing network traffic.
Increases performance: Upon the first use, a plan for the stored procedure is created and stored in the buffer pool for quick execution for the next time.
How to Create a Simple Stored Procedure in SQL?
Creating a stored procedure in SQL is as easy as it can get. The syntax of SQL stored procedure is:
CREATE or REPLACE PROCEDURE name(parameters)
AS
variables;
BEGIN;
//statements;
END;
In the syntax mentioned above, the only thing to note here are the parameters, which can be the following three types:
IN: It is the default parameter that will receive input value from the program
OUT: It will send output value to the program
IN OUT: It is the combination of both IN and OUT. Thus, it receives from, as well as sends a value to the program
Note: You will work with and look at examples for different parameters in this article.
You will use the syntax to create a simple stored procedure in SQL. But before that, create two tables using the CREATE TABLE command that you will use throughout the article. You will also insert some values in them using the INSERT INTO command.
CREATE TABLE Car(
CarID INT,
CarName VARCHAR(100)
);
INSERT INTO Car VALUES (101,'Mercedes-Benz');
INSERT INTO Car VALUES (201,'BMW');
INSERT INTO Car VALUES (301,'Ferrari');
INSERT INTO Car VALUES (401,'Lamborghini');
INSERT INTO Car VALUES (501,'Porsche');
SELECT * FROM Car;
Output:
StoredProcedureInSQL_1
Now create the second table named CarDescription.
CREATE TABLE CarDescription(
CarID INT,
CarDescription VARCHAR(800)
);
INSERT INTO CarDescription VALUES (101,'Luxury vehicle from the German automotive');
INSERT INTO CarDescription VALUES (201,'Luxury motorcycle from the German automotive');
INSERT INTO CarDescription VALUES (301,'Luxury sports car from the Italian manufacturer');
INSERT INTO CarDescription VALUES (401,'Luxury SUV from the Italian automotive');
INSERT INTO CarDescription VALUES (501,'High-performance sports car from the German manufacturer');
SELECT * FROM CarDescription;
Output:
StoredProcedureInSQL_2
Now that you have created both the tables, start creating the stored procedure in SQL with the syntax mentioned earlier. For the simple procedure, you will have to use the JOIN keyword to join both the tables, and output a new one with CarID, CarName, and CarDescription.
CREATE PROCEDURE GetCarDesc
AS
BEGIN
SET NOCOUNT ON
SELECT C.CarID,C.CarName,CD.CarDescription  FROM 
Car C
INNER JOIN CarDescription CD ON C.CarID=CD.CarID
END
CREATE PROCEDURE GetCarDesc_Para
(@CID INT)
AS
BEGIN
SET NOCOUNT ON
SELECT C.CarID,C.CarName,CD.CarDescription  FROM 
Car C
INNER JOIN CarDescription CD ON C.CarID=CD.CarID
WHERE C.CarID=@CID
END
Practice on Operators  like:
Arithmetic Operators
Bitwise Operators
Comparison Operators
Compound Operators
 Joins:
Self joins:
-select a.ename as employee,b.ename as manager
  from Employee a,Employee b
  where a.Eid=b.Deptid
Inner join:
 -select * from Employee
  select a.ename as EmployeeName,b.ename as DepartmentName 
  from Employee a
  join employee b on a.eid=b.deptid
Left Join
 - select a.ename as Employee,b.ename as manager 
 from Employee a
 left join employee b on b.deptid=a.eid
Cross Join:
 -  select a.ename as Employee,b.ename as manager 
 from Employee a
 cross join employee b 
Except Operator:
 -EXCEPT returns only rows, which are not available in the second SELECT statement.
 -select * from Books2
 except
 select * from Books1
EXCEPT vs NOT NULL:
-select * from books1
 where id not in (select id from Books2)

Assignment:
- Created a database in the ssms and then go to visual studio code and connected the database using the server explorer and there connect the 
database to the visual studio code and there give the server name and select the database 
-using the sqlconnection connect to the database using the string and there you can do the operations which you want to do by sqlcommand 
-So whatever you have done here willn effect the database table.